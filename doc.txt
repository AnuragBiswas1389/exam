//--------------------------html form ------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Registration Form</title>
</head>
<body>
    <form id="registrationForm" action="/submit" method="POST">
        <h2>User Registration</h2>
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">Register</button>
    </form>
</body>
</html>

//--------------------------------- form submission javascript code also for http methods------------------

const express = require("express");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

app.get("/", (req, res) => {
  res.sendFile(__dirname + "/index.html");
});

app.post("/submit", (req, res) => {
  const { username, email, password } = req.body;
  console.log("Received:", { username, email, password });
  res.send(
    `<div><h1>Welcome ${username}</h1>Your Registration is successful</div>`
  );
});

app.listen(3000, () => {
  console.log("Server running on port 3000");


//--------------------------------------serve static file using express.js-----------------------------

const express = require('express');
const path = require('path');

const app = express();
const PORT = 3000;

// Serve static files from 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// Optional: Specific route for home page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
});




//---------------------------------------------html form for mongodb authentication-----------------------------

<!DOCTYPE html>
<html>
<body>
    <h2>Registration</h2>
    <form action="/submit" method="POST">
        <input type="text" name="username" placeholder="Username" required>
        <input type="email" name="email" placeholder="Email" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Register</button>
    </form>

    <h2>Login</h2>
    <form action="/login" method="POST">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
    </form>
</body>
</html>

//-------------------------------------------------- mongodb authentication javascript code----------------------------------

const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

// const MONGODB_URI =
//   "mongodb+srv://technobeat83:y9hp0yVBBDLQ1x39@cluster0.9ghhb.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

const MONGODB_URI = "mongodb://localhost:27017/userDB";

mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
});

// Create User Model
const User = mongoose.model("User", userSchema);

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

app.get("/", (req, res) => {
  res.sendFile(__dirname + "/users.html");
});

app.post("/submit", async (req, res) => {
  try {
    const { username, email, password } = req.body;

    const existingUser = await User.findOne({
      $or: [{ email }, { username }],
    });

    if (existingUser) {
      return res.status(400).send("User already exists");
    }

    const newUser = new User({
      username,
      email,
      password,
    });

    await newUser.save();

    res.send("Registration successful!");
  } catch (error) {
    console.error(error);
    res.status(500).send("Server error during registration");
  }
});

app.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    const user = await User.findOne({ username, password });

    if (!user) {
      return res.status(400).send("Invalid credentials");
    }
    res.send("Login successful!");
  } catch (error) {
    console.error(error);
    res.status(500).send("Server error during login");
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

