//-------------------1 experiment---------------

import numpy as np
import pandas as pd
import os
os.chdir('/content/drive/MyDrive/Colab Notebooks/Data Science/Sample Data')
data = pd.read_csv('MallCustomers.csv')
data.head()
X = data.iloc[:,:-1].values
Y = data.iloc[:,4].values

from sklearn.preprocessing import LabelEncoder
lablelencode = LabelEncoder()
X[:,1] = lablelencode.fit_transform(X[:,1])
X

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer([("Gender", OneHotEncoder(), [1])], remainder = 'passthrough')
ct.fit_transform(X)

!pip install category_encoders
import category_encoders as ce
df = pd.DataFrame({'height':['tall', 'medium', 'short', 'tall', 'medium', 'short', 'tall', 'medium', 'short']})
encoder = ce.BinaryEncoder(cols=['height'], return_df=True, mapping = [{'col': 'height', 'mapping':{'None':0, 'tall':1, 'medium':2, 'short':3}}])
print(df)
df_encoded = encoder.fit_transform(df)
df = pd.concat([df, df_encoded.add_prefix('transformed_')], axis=1)
print(df)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 1)
print(X_train.shape)

dataset = pd.read_csv('diabetes.csv')
X = dataset.iloc[:,:-1].values
Y = dataset.iloc[:,8].values
dataset.head()

np.set_printoptions(edgeitems=127)

from sklearn.preprocessing import StandardScaler
stdscalar = StandardScaler()
X_train = stdscalar.fit_transform(X_train)
X_test = stdscalar.transform(X_test)
X_test

from sklearn.preprocessing import MinMaxScaler
minmaxscalar = MinMaxScaler()
X_train = minmaxscalar.fit_transform(X_train)
X_train
data = pd.read_csv('employee_data.csv')
data.head()
import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(x = data['Age'])

Q1 = data['Age'].quantile(0.25)
Q3 = data['Age'].quantile(0.75)
IQR = Q3 - Q1
print(IQR)
lower_limit = Q1 - 1.5 * IQR
upper_limit = Q3 + 1.5 * IQR
print(lower_limit)
print(upper_limit)
data = data[(data['Age'] > lower_limit) & (data['Age'] < upper_limit)]
data

data = data[(data['Age'] > Q1) & (data['Age'] < Q3)]
data

______________________ experiment 2 __________________

import pandas as pd
import numpy as np
from google.colab import files
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.impute import SimpleImputer

uploaded = files.upload() 
file_name = list(uploaded.keys())[0]    
df = pd.read_csv(file_name)

print("Missing Values:\n", df.isnull().sum())

for column in df.columns:
    if df[column].dtype == 'object': 
        df.loc[:, column] = df[column].fillna(df[column].mode()[0]) 
    else:  
        df.loc[:, column] = df[column].fillna(df[column].mean())  

label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    df.loc[:, column] = label_encoders[column].fit_transform(df[column])

X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values  

ohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
X_encoded = ohe.fit_transform(X)


X_df = pd.DataFrame(X_encoded)
print("\nProcessed Data with One-Hot Encoding:\n", X_df.head())


X_df.to_csv('processed_data.csv', index=False)
print("\nProcessed data saved as 'processed_data.csv'")

------------------------------ experiment 3 ------------------
import pandas as pd
from google.colab import drive

# Mount Google Drive (if not already mounted)
drive.mount('/content/drive', force_remount=True)

# Define Correct File Path
file_path = "/content/drive/MyDrive/MallCustomers.csv"  # Adjust if inside a subfolder

# Check if File Exists
import os
if os.path.exists(file_path):
    print(" File found! Loading dataset...")
    data = pd.read_csv(file_path)
    print(data.head())  # Display first few rows
else:
    print("File not found! Check the Google Drive path.")
data = pd.read_csv("/content/drive/MyDrive/MallCustomers.csv")
print(data.head())

# Separate Independent & Dependent Variables
X = data.iloc[:, :-1].values  # Features
Y = data.iloc[:, 4].values  # Target variable

# Apply Label Encoding for 'Gender' Column
from sklearn.preprocessing import LabelEncoder
labelencode = LabelEncoder()
X[:, 1] = labelencode.fit_transform(X[:, 1])  # Ensure X[:,1] is categorical
# Apply One-Hot Encoding on 'Gender' Column
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

ct = ColumnTransformer(transformers=[("Gender", OneHotEncoder(), [1])], remainder="passthrough")
X = ct.fit_transform(X)
# Verify the transformation
print("\nTransformed X (One-Hot Encoded):\n", X)
