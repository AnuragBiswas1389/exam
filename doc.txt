-------------1. 
#include <iostream>
#include <unordered_map>
#include <vector>

std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::unordered_map<int, int> numMap;

    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        if (numMap.find(complement) != numMap.end()) {
            return {numMap[complement], i};
        }
        numMap[nums[i]] = i;
    }

    return {}; 
}

int main() {
    std::vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    std::vector<int> result = twoSum(nums, target);

    if (!result.empty()) {
        std::cout << "Indices: [" << result[0] << ", " << result[1] << "]" << std::endl;
    } else {
        std::cout << "No solution found." << std::endl;
    }

    return 0;
}


------------2.Reverse Words in a String (C Solution)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void reverseString(char* s, int start, int end) {
    while (start < end) {
        char temp = s[start];
        s[start] = s[end];
        s[end] = temp;
        start++;
        end--;
    }
}

char* reverseWords(char* s) {
    int length = strlen(s);
    reverseString(s, 0, length - 1); 

    int start = 0;
    for (int i = 0; i <= length; i++) {
        if (s[i] == ' ' || s[i] == '\0') {
            reverseString(s, start, i - 1);
            start = i + 1;
        }
    }

    return s;
}

int main() {
    char str[] = "hello world";
    printf("Original string: %s\n", str);
    printf("Reversed string: %s\n", reverseWords(str));

    return 0;
}


--------------------3. count unique words
#include <stdio.h>
#include <ctype.h>

int firstUniqChar(char * s){

    int freq[26] = {0};
    int len = strlen(s);

    for (int i = 0; i < len; i++) {

        if (islower(s[i])) {
            freq[s[i] - 'a']++;
        }
    } 

    for (int i = 0; i < len; i++) {

        if (islower(s[i]) && freq[s[i] - 'a'] == 1){          
            return i;
        }
    }

  return -1; 
}

int main() {
    char str[] = "leetcode";
    int index = firstUniqChar(str);

    printf("Index of first non-repeating  character: %d\n", index);

    return 0;
}


4.-------

#include <iostream>
#include <stack>
#include <string>
#include <unordered_map>

bool isValid(std::string s) {
    std::stack<char> stack;
    std::unordered_map<char, char> mapping = {
        {')', '('},
        {']', '['},
        {'}', '{'}
    };

    for (char c : s) {
        if (c == '(' || c == '[' || c == '{') {
            stack.push(c);
        } else if (c == ')' || c == ']' || c == '}') {
            if (stack.empty() || mapping[c] != stack.top()) {
                return false;
            }
            stack.pop();
        }
    }

    return stack.empty();
}

int main() {
    std::string s = "()[]{}";
    std::cout << "Is valid: " << (isValid(s) ? "true" : "false") << std::endl;

    s = "(]";
    std::cout << "Is valid: " << (isValid(s) ? "true" : "false") << std::endl;

    return 0;
}


5.--------

#include <iostream>
#include <algorithm>

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (root == NULL) {
            return 0;
        } else {
            return 1 + std::max(maxDepth(root->left), maxDepth(root->right));
        }
    }
};

int main() {
    //       3
    //      / \
    //     9  20
    //        /  \
    //       15   7

    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(9);
    root->right = new TreeNode(20);
    root->right->left = new TreeNode(15);
    root->right->right = new TreeNode(7);

    Solution solution;
    int maxDepth = solution.maxDepth(root);
    std::cout << "Maximum depth: " << maxDepth << std::endl;

    return 0;
}
